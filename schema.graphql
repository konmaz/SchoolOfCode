schema {
    query: Query
    mutation: Mutation
}

type Movie {
    id: ID!
    title: String!
    description: String!
    created_at: String!
    year: String!
    cast_members: [ParticipationCastInMovie]
}

type MovieResult {
    success: Boolean!
    errors: [String]
    movie: Movie
}

type MoviesResult {
    success: Boolean!
    errors: [String]
    movies: [Movie]
}

type CastMemberResult  {
    success: Boolean!
    errors: [String]
    cast_member: CastMember
}

type CastMembersResult  {
    success: Boolean!
    errors: [String]
    cast_members: [CastMember]
}

type GeneralMulResult{
    success: Boolean!
    errors: [String]
}

type Query {
    listMovies: MoviesResult!
    getMovie(id: ID!): MovieResult!
    listCastMembers: CastMembersResult
}

type Mutation {
    createMovie(title: String!, description: String!, year: String!): MovieResult!
    updateMovie(id: ID!, title: String, description: String): MovieResult!
    deleteMovie(id: ID): MovieResult!
    createCastMember(name: String!): CastMemberResult!
    addCastMemberInMovie(castID: ID!, movieID: ID!, category:CastMemberType!): GeneralMulResult!
    updateCastMember(existingID: ID! ,name: String!): CastMemberResult!
}

type CastMember {
    id: ID!
    name: String!
    movies_catalog: [ParticipationOfMovie]
}

type ParticipationCastInMovie {
    idOfCastMember: ID!
    name: String!
    type: CastMemberType!
}

type ParticipationOfMovie {
    type: CastMemberType!
    movie: Movie!
}


enum CastMemberType {
  ACTOR
  DIRECTOR
  WRITER
}